{"version":3,"mappings":";4wDAAaA,EAAwB,CACjC,KAAM,CACF,KAAM,SACd,EACI,MAAO,CACH,KAAM,SACd,CACA,ECCO,SAASC,EAAkBC,EAAQ,CACtC,KAAM,CAA2B,mBAAAC,CAAkB,EAAKD,EAClDE,EAAoB,OAAO,MAAM,IAAM,CAIzC,IAAIC,EAAQ,KACZ,GAAI,CACAA,EAAQ,IAAI,gBAAgB,SAAS,MAAM,EAAE,IAAI,OAAO,CAC5D,MACW,CAAE,CACb,GAAIA,IAAU,QACV,MAAO,OAEX,GAAIA,IAAU,OACV,MAAO,QAEXA,EAAQ,KACR,MAAMC,EAAiB,8CACvB,GAAI,CACAD,EAAQ,IAAI,gBAAgB,SAAS,MAAM,EAAE,IAAIC,CAAc,CACnE,MACW,CAAE,CACb,GAAID,IAAU,KACV,OAAOA,EAEX,GAAI,CACAA,EAAQ,aAAa,QAAQC,CAAc,CAC/C,MACW,CAAE,CACb,GAAID,IAAU,KACV,OAAOA,EAEX,GAAI,CACAA,EAAQ,OAAO,WAAW,8BAA8B,EACnD,QACC,OACA,OACV,MACW,CAAE,CACb,OAAIA,IAAU,KACHA,EAEJ,OACX,IAAI,EACJ,CACI,MAAME,GAAmB,IAAM,CAC3B,IAAIC,EAAIC,EACR,MAAMC,EAA0FP,IAAmB,CAAE,kBAAAC,EAAmB,EAClIO,EAAMP,EAAoB,OAAS,QACzC,OAASK,GAAMD,EAAuEE,IAAgBC,CAAG,KAAO,MAAQH,IAAO,OAAS,OAASA,EAAG,QAAU,MAAQC,IAAO,OAASA,EAAKT,EAAsBW,CAAG,EAAE,IAC1N,GAAC,EAED,IADA,SAAS,gBAAgB,MAAM,gBAAkBJ,IACpC,CACT,MAAMK,EAAU,SAAS,cAAc,wBAAwB,EAC/D,GAAIA,IAAY,KACZ,MAEJA,EAAQ,OAAM,CAClB,CACA,SAAS,KAAK,mBAAmB,YAAa,qCAAuCL,EAAkB,IAAI,CAC/G,CACA,CACI,MAAMM,EAAK,oBACXC,EAAyB,CACrB,MAAMF,EAAU,SAAS,eAAeC,CAAE,EAC1C,GAAID,IAAY,KACZ,MAAME,EAEVF,EAAQ,OAAM,CAClB,CACA,MAAMA,EAAU,SAAS,cAAc,OAAO,EAC9CA,EAAQ,GAAKC,EACbD,EAAQ,UAAY;AAAA;AAAA,qBAEPR,EAAoB,OAAS,OAAO;AAAA;AAAA,IAGjD,SAAS,qBAAqB,MAAM,EAAE,CAAC,EAAE,YAAYQ,CAAO,CAChE,CAEA,SAAS,gBAAgB,aAAa,QAASR,EAAoB,OAAS,OAAO,CACvF,CCxFAH,EAAkB,CAEd,mBAAoB,CAAC,CAAE,kBAAAG,CAAA,IACnBA,EACM,CACI,KAAM,CAAE,KAAM,UAAU,EAE5B,CACI,MAAO,CAAE,KAAM,UAAU,CAE3C,CAAC,QAED,OAAO,yBAAa,OAAAW,KAAA","names":["defaultPalette_urgent","onyxiaUiEarlyInit","params","getPaletteOverride","isDarkModeEnabled","value","POWERHOOKS_KEY","backgroundColor","_a","_b","paletteOverride","key","element","id","remove_existing_element","n"],"ignoreList":[0,1],"sources":["../../node_modules/onyxia-ui/lib/color.urgent.js","../../node_modules/onyxia-ui/earlyInit.js","../../src/ui/main.ts"],"sourcesContent":["export const defaultPalette_urgent = {\n    dark: {\n        main: \"#2C323F\",\n    },\n    light: {\n        main: \"#F1F0EB\",\n    },\n};\n//# sourceMappingURL=color.urgent.js.map","import { defaultPalette_urgent, } from \"./lib/color.urgent\";\n/*\nThis is a way to get the correct background color as soon as possible,\neven before the JavaScript bundle is evaluated.\nIt is to prevent a white flash when the user has dark mode enabled.\nIt is very implementation dependent and can easily break...\nif it does no big deal.\n*/\nexport function onyxiaUiEarlyInit(params) {\n    const { isDarkModeEnabled_force, getPaletteOverride } = params;\n    const isDarkModeEnabled = /true/.test((() => {\n        if (isDarkModeEnabled_force !== undefined) {\n            return `${isDarkModeEnabled_force}`;\n        }\n        let value = null;\n        try {\n            value = new URLSearchParams(location.search).get(\"theme\");\n        }\n        catch (_a) { }\n        if (value === \"light\") {\n            return \"true\";\n        }\n        if (value === \"dark\") {\n            return \"false\";\n        }\n        value = null;\n        const POWERHOOKS_KEY = \"powerhooks_useGlobalState_isDarkModeEnabled\";\n        try {\n            value = new URLSearchParams(location.search).get(POWERHOOKS_KEY);\n        }\n        catch (_b) { }\n        if (value !== null) {\n            return value;\n        }\n        try {\n            value = localStorage.getItem(POWERHOOKS_KEY);\n        }\n        catch (_c) { }\n        if (value !== null) {\n            return value;\n        }\n        try {\n            value = window.matchMedia(\"(prefers-color-scheme: dark)\")\n                .matches\n                ? \"true\"\n                : \"false\";\n        }\n        catch (_d) { }\n        if (value !== null) {\n            return value;\n        }\n        return \"false\";\n    })());\n    {\n        const backgroundColor = (() => {\n            var _a, _b;\n            const paletteOverride = getPaletteOverride === null || getPaletteOverride === void 0 ? void 0 : getPaletteOverride({ isDarkModeEnabled });\n            const key = isDarkModeEnabled ? \"dark\" : \"light\";\n            return ((_b = (_a = paletteOverride === null || paletteOverride === void 0 ? void 0 : paletteOverride[key]) === null || _a === void 0 ? void 0 : _a.main) !== null && _b !== void 0 ? _b : defaultPalette_urgent[key].main);\n        })();\n        document.documentElement.style.backgroundColor = backgroundColor;\n        while (true) {\n            const element = document.querySelector(\"meta[name=theme-color]\");\n            if (element === null) {\n                break;\n            }\n            element.remove();\n        }\n        document.head.insertAdjacentHTML(\"beforeend\", '<meta name=\"theme-color\" content=\"' + backgroundColor + '\">');\n    }\n    {\n        const id = \"root-color-scheme\";\n        remove_existing_element: {\n            const element = document.getElementById(id);\n            if (element === null) {\n                break remove_existing_element;\n            }\n            element.remove();\n        }\n        const element = document.createElement(\"style\");\n        element.id = id;\n        element.innerHTML = `\n\t\t\t\t:root {\n\t\t\t\t\tcolor-scheme: ${isDarkModeEnabled ? \"dark\" : \"light\"}\n\t\t\t\t}\n\t\t`;\n        document.getElementsByTagName(\"head\")[0].appendChild(element);\n    }\n    // To enable custom css stylesheets to target a specific theme\n    document.documentElement.setAttribute(\"theme\", isDarkModeEnabled ? \"dark\" : \"light\");\n}\n//# sourceMappingURL=earlyInit.js.map","import { onyxiaUiEarlyInit } from \"onyxia-ui/earlyInit\";\n\nonyxiaUiEarlyInit({\n    isDarkModeEnabled_force: undefined,\n    getPaletteOverride: ({ isDarkModeEnabled }) =>\n        isDarkModeEnabled\n            ? {\n                  dark: { main: \"#0A0F18\" },\n              }\n            : {\n                  light: { main: \"#FAFAFA\" },\n              },\n});\n\nimport(\"./main.lazy\");\n"],"file":"assets/index-Df_Ce1P9.js"}
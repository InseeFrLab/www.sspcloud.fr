{"version":3,"file":"isInternalUrl-DptwlzAF.js","sources":["../../node_modules/tsafe/esm/lab/overwriteReadonlyProp.mjs","../../node_modules/tsafe/esm/assert.mjs","../../src/core/tools/isInternalUrl.ts"],"sourcesContent":["/**\n * Assign a value to a property even if the object is freezed or if the property is not writable\n * Throw if the assignation fail ( for example if the property is non configurable write: false )\n * */\nexport function overwriteReadonlyProp(obj, propertyName, value) {\n    try {\n        obj[propertyName] = value;\n    }\n    catch { }\n    if (obj[propertyName] === value) {\n        return value;\n    }\n    let errorDefineProperty = undefined;\n    const propertyDescriptor = Object.getOwnPropertyDescriptor(obj, propertyName) || {\n        \"enumerable\": true,\n        \"configurable\": true,\n    };\n    if (!!propertyDescriptor.get) {\n        throw new Error(`Probably a wrong idea to overwrite ${String(propertyName)} getter`);\n    }\n    try {\n        Object.defineProperty(obj, propertyName, {\n            ...propertyDescriptor,\n            value,\n        });\n    }\n    catch (error) {\n        errorDefineProperty = error;\n    }\n    if (obj[propertyName] !== value) {\n        throw errorDefineProperty || new Error(\"Can't assign\");\n    }\n    return value;\n}\n//# sourceMappingURL=overwriteReadonlyProp.mjs.map","import { overwriteReadonlyProp } from \"./lab/overwriteReadonlyProp.mjs\";\n/** https://docs.tsafe.dev/assert#error-thrown */\nexport class AssertionError extends Error {\n    constructor(msg) {\n        super(`Wrong assertion encountered` + (!msg ? \"\" : `: \"${msg}\"`));\n        this.originalMessage = msg;\n        Object.setPrototypeOf(this, new.target.prototype);\n        if (!this.stack) {\n            return;\n        }\n        try {\n            overwriteReadonlyProp(this, \"stack\", this.stack\n                .split(\"\\n\")\n                .filter((...[, i]) => i !== 1 && i !== 2)\n                .join(\"\\n\"));\n        }\n        catch { }\n    }\n}\nlet refOfIs = undefined;\n/** https://docs.tsafe.dev/assert */\nexport function assert(condition, msg) {\n    if (arguments.length === 0) {\n        condition = true;\n    }\n    if (refOfIs !== undefined) {\n        refOfIs = undefined;\n        return;\n    }\n    if (!condition) {\n        throw new AssertionError(typeof msg === \"function\" ? msg() : msg);\n    }\n}\nconst errorMessage = \"Wrong usage of the `is` function refer to https://docs.tsafe.dev/is\";\n/** https://docs.tsafe.dev/is */\nexport function is(value) {\n    const ref = {};\n    if (refOfIs !== undefined) {\n        refOfIs = undefined;\n        throw new Error(errorMessage);\n    }\n    refOfIs = ref;\n    Promise.resolve().then(() => {\n        if (refOfIs === ref) {\n            throw new Error(errorMessage);\n        }\n    });\n    return null;\n}\n//# sourceMappingURL=assert.mjs.map\n","export function getIsInternalUrl(href: string) {\n    return href.startsWith(\"/\") && !href.startsWith(\"//:\");\n}\n"],"names":["overwriteReadonlyProp","obj","propertyName","value","errorDefineProperty","propertyDescriptor","error","AssertionError","msg","i","assert","condition","getIsInternalUrl","href"],"mappings":"AAIO,SAASA,EAAsBC,EAAKC,EAAcC,EAAO,CAC5D,GAAI,CACAF,EAAIC,CAAY,EAAIC,CACxB,MACM,CAAE,CACR,GAAIF,EAAIC,CAAY,IAAMC,EACtB,OAAOA,EAEX,IAAIC,EACJ,MAAMC,EAAqB,OAAO,yBAAyBJ,EAAKC,CAAY,GAAK,CAC7E,WAAc,GACd,aAAgB,EACxB,EACI,GAAMG,EAAmB,IACrB,MAAM,IAAI,MAAM,sCAAsC,OAAOH,CAAY,CAAC,SAAS,EAEvF,GAAI,CACA,OAAO,eAAeD,EAAKC,EAAc,CACrC,GAAGG,EACH,MAAAF,CACZ,CAAS,CACL,OACOG,EAAO,CACVF,EAAsBE,CAC1B,CACA,GAAIL,EAAIC,CAAY,IAAMC,EACtB,MAAMC,GAAuB,IAAI,MAAM,cAAc,EAEzD,OAAOD,CACX,CC/BO,MAAMI,UAAuB,KAAM,CACtC,YAAYC,EAAK,CAIb,GAHA,MAAM,+BAAkCA,EAAW,MAAMA,CAAG,IAAd,GAAkB,EAChE,KAAK,gBAAkBA,EACvB,OAAO,eAAe,KAAM,WAAW,SAAS,EAC5C,EAAC,KAAK,MAGV,GAAI,CACAR,EAAsB,KAAM,QAAS,KAAK,MACrC,MAAM;AAAA,CAAI,EACV,OAAO,IAAI,EAAGS,CAAC,IAAMA,IAAM,GAAKA,IAAM,CAAC,EACvC,KAAK;AAAA,CAAI,CAAC,CACnB,MACM,CAAE,CACZ,CACJ,CAGO,SAASC,EAAOC,EAAWH,EAAK,CAQnC,GAPI,UAAU,SAAW,IACrBG,EAAY,IAMZ,CAACA,EACD,MAAM,IAAIJ,EAAe,OAAOC,GAAQ,WAAaA,EAAG,EAAKA,CAAG,CAExE,CChCO,SAASI,EAAiBC,EAAc,CAC3C,OAAOA,EAAK,WAAW,GAAG,GAAK,CAACA,EAAK,WAAW,KAAK,CACzD","x_google_ignoreList":[0,1]}